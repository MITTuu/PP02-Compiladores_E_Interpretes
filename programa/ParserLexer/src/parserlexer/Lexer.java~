/* The following code was generated by JFlex 1.4.3 on 12/22/24, 7:28 PM */

package parserlexer;
import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/22/24, 7:28 PM from the specification file
 * <tt>D:/TEC/Verano 2024/Compiladores e Interpretes/PP02-Compiladores_E_Interpretes/programa/ParserLexer/src/parserlexer/Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int IO_OPERATORS = 14;
  public static final int ARRAYS = 6;
  public static final int TYPES = 4;
  public static final int LITERALS = 2;
  public static final int YYINITIAL = 0;
  public static final int BLOCKS = 10;
  public static final int CONTROL_STRUCTURES = 12;
  public static final int OPERATORS = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 16,  0,  0, 17,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0, 14, 18,  0,  0,  0, 13,  0,  0,  0,  0, 38,  2,  4, 20, 
     1,  3,  3,  3,  3,  3,  3,  3,  3,  3,  0,  0,  0,  0,  0,  0, 
     0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0, 15,  0,  0, 19, 
     0, 10, 26, 29, 25,  8,  9, 32, 34, 28, 24, 24, 11, 27, 22, 23, 
    30, 31,  6, 12,  5,  7, 21, 35, 36, 33, 37,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\2\1\1\2\1\1\1\3\1\1\1\3\12\1"+
    "\1\4\27\1\1\5\2\1\1\0\2\2\2\0\1\6"+
    "\3\0\1\7\1\0\1\10\52\0\1\11\55\0\1\2"+
    "\1\0\1\12\23\0\1\13\13\0\1\14\6\0\1\15"+
    "\13\0\1\16\13\0\1\17\3\0\1\20\7\0\1\21"+
    "\1\22\2\0\1\23\2\0\1\24\1\0\1\25\2\0"+
    "\1\26\1\27\20\0\1\30\1\31\3\0\1\32\1\0"+
    "\1\33\1\34\3\0\1\35\3\0\1\36\1\0\1\37"+
    "\3\0\1\40\4\0\1\41\7\0\1\42\1\43\1\44"+
    "\3\0\1\45\1\0\1\46\1\0\1\47\1\0\1\50"+
    "\5\0\1\51\1\52\2\0\1\53\2\0\1\54\2\0"+
    "\1\55\4\0\1\56\1\57\2\0\1\60\1\0\1\61"+
    "\1\0\1\62\3\0\1\63\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u0138\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492"+
    "\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca"+
    "\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702"+
    "\0\u0729\0\u0138\0\u0750\0\u0777\0\u079e\0\u0138\0\u07c5\0\u07ec"+
    "\0\u0813\0\u083a\0\u0861\0\u0888\0\u0297\0\u0138\0\u02be\0\u0138"+
    "\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0"+
    "\0\u09e7\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8"+
    "\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30"+
    "\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68"+
    "\0\u0d8f\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0"+
    "\0\u0ec7\0\u0eee\0\u0138\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1"+
    "\0\u0fd8\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9"+
    "\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u1221"+
    "\0\u1248\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359"+
    "\0\u1380\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491"+
    "\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9"+
    "\0\u079e\0\u15f0\0\u0138\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3"+
    "\0\u16da\0\u1701\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb"+
    "\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u0138\0\u18fc"+
    "\0\u1923\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34"+
    "\0\u1a5b\0\u1a82\0\u0138\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45"+
    "\0\u1b6c\0\u0138\0\u1b93\0\u1bba\0\u1be1\0\u1c08\0\u1c2f\0\u1c56"+
    "\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u0138\0\u1d40\0\u1d67"+
    "\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03\0\u1e2a\0\u1e51\0\u1e78\0\u1e9f"+
    "\0\u1ec6\0\u0138\0\u1eed\0\u1f14\0\u1f3b\0\u0138\0\u1f62\0\u1f89"+
    "\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u0138\0\u0138\0\u2073"+
    "\0\u209a\0\u0138\0\u20c1\0\u20e8\0\u0138\0\u210f\0\u0138\0\u2136"+
    "\0\u215d\0\u0138\0\u0138\0\u2184\0\u21ab\0\u21d2\0\u21f9\0\u2220"+
    "\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u230a\0\u2331\0\u2358"+
    "\0\u237f\0\u23a6\0\u23cd\0\u0138\0\u0138\0\u23f4\0\u241b\0\u2442"+
    "\0\u0138\0\u2469\0\u0138\0\u0138\0\u2490\0\u24b7\0\u24de\0\u0138"+
    "\0\u2505\0\u252c\0\u2553\0\u0138\0\u257a\0\u0138\0\u25a1\0\u25c8"+
    "\0\u25ef\0\u0138\0\u2616\0\u263d\0\u2664\0\u268b\0\u0138\0\u26b2"+
    "\0\u26d9\0\u2700\0\u2727\0\u274e\0\u2775\0\u279c\0\u0138\0\u0138"+
    "\0\u0138\0\u27c3\0\u27ea\0\u2811\0\u0138\0\u2838\0\u0138\0\u285f"+
    "\0\u0138\0\u2886\0\u0138\0\u28ad\0\u28d4\0\u28fb\0\u2922\0\u2949"+
    "\0\u0138\0\u0138\0\u2970\0\u2997\0\u0138\0\u29be\0\u29e5\0\u0138"+
    "\0\u2a0c\0\u2a33\0\u0138\0\u2a5a\0\u2a81\0\u2aa8\0\u2acf\0\u0138"+
    "\0\u0138\0\u2af6\0\u2b1d\0\u0138\0\u2b44\0\u0138\0\u2b6b\0\u0138"+
    "\0\u2b92\0\u2bb9\0\u2be0\0\u0138\0\u0138\0\u0138";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\17\11\1\12\1\0\1\11\1\13\1\14\24\11\1\15"+
    "\1\16\1\17\1\11\1\20\3\11\1\21\3\11\1\22"+
    "\1\23\1\11\1\0\33\11\1\24\1\25\11\11\1\0"+
    "\11\11\1\26\2\11\1\27\23\11\1\30\5\11\1\0"+
    "\14\11\1\31\13\11\1\32\3\11\1\33\1\34\1\35"+
    "\1\11\1\36\1\11\1\37\3\11\1\0\5\11\1\40"+
    "\1\41\2\11\1\42\1\43\1\44\1\45\1\11\1\46"+
    "\1\47\17\11\1\50\1\51\5\11\1\0\14\11\1\52"+
    "\20\11\1\53\1\54\3\11\1\55\3\11\1\0\4\11"+
    "\1\56\3\11\1\57\3\11\1\60\4\11\1\61\3\11"+
    "\1\62\10\11\1\63\7\11\1\0\5\11\1\64\20\11"+
    "\72\0\1\65\23\0\20\13\1\66\1\67\25\13\1\0"+
    "\1\70\1\0\1\70\1\0\10\70\10\0\1\71\20\70"+
    "\5\0\1\72\45\0\1\17\44\0\1\17\1\0\1\17"+
    "\1\72\50\0\1\73\52\0\1\74\34\0\15\75\1\76"+
    "\31\75\16\77\1\100\1\101\27\77\6\0\1\102\67\0"+
    "\1\103\25\0\1\104\47\0\1\105\17\0\1\106\51\0"+
    "\1\107\50\0\1\110\22\0\1\111\74\0\1\112\35\0"+
    "\1\113\1\114\51\0\1\115\1\116\42\0\1\117\32\0"+
    "\1\120\14\0\1\121\55\0\1\122\22\0\1\123\44\0"+
    "\1\124\1\0\1\125\21\0\1\126\40\0\1\127\54\0"+
    "\1\130\21\0\1\131\45\0\1\132\3\0\1\133\70\0"+
    "\1\134\44\0\1\135\50\0\1\136\25\0\1\137\46\0"+
    "\1\140\12\0\1\141\54\0\1\142\24\0\1\143\43\0"+
    "\1\144\66\0\1\145\31\0\1\146\21\0\1\147\26\0"+
    "\1\150\44\0\1\151\34\0\17\65\1\0\3\65\1\152"+
    "\23\65\20\0\1\66\27\0\1\70\1\0\1\70\1\0"+
    "\10\70\6\0\1\153\1\0\21\70\2\0\1\70\1\0"+
    "\1\70\1\0\3\70\1\154\4\70\6\0\1\153\1\0"+
    "\21\70\2\0\1\72\1\155\1\72\52\0\1\156\52\0"+
    "\1\157\33\0\20\77\1\0\26\77\7\0\1\160\70\0"+
    "\1\161\44\0\1\162\55\0\1\163\43\0\1\164\21\0"+
    "\1\165\50\0\1\166\77\0\1\167\17\0\1\170\44\0"+
    "\1\171\43\0\1\172\66\0\1\173\27\0\1\174\67\0"+
    "\1\175\44\0\1\176\56\0\1\177\21\0\1\200\51\0"+
    "\1\201\46\0\1\202\41\0\1\203\31\0\1\204\34\0"+
    "\1\205\25\0\1\206\51\0\1\207\72\0\1\210\46\0"+
    "\1\211\26\0\1\212\60\0\1\213\26\0\1\214\50\0"+
    "\1\215\43\0\1\216\52\0\1\217\62\0\1\220\61\0"+
    "\1\221\14\0\1\222\50\0\1\223\44\0\1\224\71\0"+
    "\1\225\31\0\1\226\67\0\1\227\17\0\1\230\40\0"+
    "\17\65\1\0\3\65\1\152\1\231\22\65\1\0\1\70"+
    "\1\0\1\70\1\0\1\70\1\232\6\70\6\0\1\153"+
    "\1\0\21\70\4\0\1\72\53\0\1\233\52\0\1\156"+
    "\42\0\1\234\65\0\1\235\52\0\1\236\47\0\1\237"+
    "\22\0\1\240\46\0\1\241\44\0\1\242\50\0\1\243"+
    "\43\0\1\244\47\0\1\245\46\0\1\246\74\0\1\247"+
    "\22\0\1\250\101\0\1\251\37\0\1\252\54\0\1\253"+
    "\32\0\1\254\25\0\1\255\76\0\1\256\52\0\1\257"+
    "\34\0\1\260\33\0\1\261\42\0\1\262\44\0\1\263"+
    "\50\0\1\264\64\0\1\265\56\0\1\266\16\0\1\267"+
    "\50\0\1\270\44\0\1\271\74\0\1\272\41\0\1\273"+
    "\26\0\1\274\24\0\1\275\21\0\1\276\73\0\1\277"+
    "\40\0\1\300\25\0\1\301\53\0\1\302\41\0\1\303"+
    "\50\0\1\304\45\0\1\305\41\0\1\70\1\0\1\70"+
    "\1\0\5\70\1\306\2\70\6\0\1\153\1\0\21\70"+
    "\27\0\1\307\33\0\1\310\67\0\1\311\43\0\1\312"+
    "\22\0\1\313\51\0\1\314\44\0\1\315\54\0\1\316"+
    "\40\0\1\317\100\0\1\320\16\0\1\321\46\0\1\322"+
    "\44\0\1\323\72\0\1\324\45\0\1\325\25\0\1\326"+
    "\52\0\1\327\74\0\1\330\46\0\1\331\20\0\1\332"+
    "\37\0\1\333\47\0\1\334\46\0\1\335\66\0\1\336"+
    "\55\0\1\337\23\0\1\340\44\0\1\341\73\0\1\342"+
    "\17\0\1\343\73\0\1\344\23\0\1\345\50\0\1\346"+
    "\44\0\1\347\65\0\1\350\50\0\1\351\27\0\1\352"+
    "\63\0\1\353\54\0\1\354\23\0\1\355\35\0\1\70"+
    "\1\0\1\70\1\0\10\70\6\0\1\153\1\0\1\70"+
    "\1\356\17\70\30\0\1\357\30\0\1\360\51\0\1\361"+
    "\61\0\1\362\31\0\1\363\67\0\1\364\25\0\1\365"+
    "\44\0\1\366\44\0\1\367\100\0\1\370\34\0\1\371"+
    "\30\0\1\372\50\0\1\373\46\0\1\374\66\0\1\375"+
    "\27\0\1\376\45\0\1\377\70\0\1\u0100\46\0\1\u0101"+
    "\47\0\1\u0102\23\0\1\u0103\76\0\1\u0104\12\0\1\u0105"+
    "\100\0\1\u0106\15\0\1\u0107\51\0\1\u0108\63\0\1\u0109"+
    "\32\0\1\u010a\47\0\1\u010b\42\0\1\u010c\44\0\1\u010d"+
    "\102\0\1\u010e\5\0\1\70\1\0\1\70\1\0\10\70"+
    "\6\0\1\153\1\0\2\70\1\u010f\16\70\30\0\1\u0110"+
    "\24\0\1\u0111\77\0\1\u0112\20\0\1\u0113\46\0\1\u0114"+
    "\46\0\1\u0115\50\0\1\u0116\41\0\1\u0117\101\0\1\u0118"+
    "\21\0\1\u0119\64\0\1\u011a\24\0\1\u011b\51\0\1\u011c"+
    "\101\0\1\u011d\30\0\1\u011e\63\0\1\u011f\14\0\1\u0120"+
    "\42\0\1\u0121\52\0\1\u0122\44\0\1\u0123\73\0\1\u0124"+
    "\36\0\1\u0125\55\0\1\u0126\24\0\1\u0127\35\0\1\70"+
    "\1\0\1\70\1\0\10\70\6\0\1\u0128\1\0\21\70"+
    "\13\0\1\u0129\46\0\1\u012a\67\0\1\u012b\23\0\1\u012c"+
    "\65\0\1\u012d\31\0\1\u012e\47\0\1\u012f\43\0\1\u0130"+
    "\46\0\1\u0131\50\0\1\u0132\42\0\1\u0133\73\0\1\u0134"+
    "\23\0\1\u0135\51\0\1\u0136\61\0\1\u0137\27\0\1\u0138"+
    "\47\0\1\u0139\50\0\1\u013a\73\0\1\u013b\45\0\1\u013c"+
    "\36\0\1\u013d\33\0\1\u013e\61\0\1\u013f\26\0\1\u0140"+
    "\72\0\1\u0141\54\0\1\u0142\35\0\1\u0143\24\0\1\u0144"+
    "\51\0\1\u0145\45\0\1\u0146\51\0\1\u0147\63\0\1\u0148"+
    "\31\0\1\u0149\70\0\1\u014a\24\0\1\u014b\63\0\1\u014c"+
    "\45\0\1\u014d\30\0\1\u014e\75\0\1\u014f\36\0\1\u0150"+
    "\32\0\1\u0151\40\0\1\u0152\50\0\1\u0153\66\0\1\u0154"+
    "\46\0\1\u0155\27\0\1\u0156\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11271];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\20\1\1\11\27\1\1\11\2\1\1\0"+
    "\1\11\1\1\2\0\1\1\3\0\1\11\1\0\1\11"+
    "\52\0\1\11\55\0\1\1\1\0\1\11\23\0\1\11"+
    "\13\0\1\11\6\0\1\11\13\0\1\11\13\0\1\11"+
    "\3\0\1\11\7\0\2\11\2\0\1\11\2\0\1\11"+
    "\1\0\1\11\2\0\2\11\20\0\2\11\3\0\1\11"+
    "\1\0\2\11\3\0\1\11\3\0\1\11\1\0\1\11"+
    "\3\0\1\11\4\0\1\11\7\0\3\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\5\0\2\11"+
    "\2\0\1\11\2\0\1\11\2\0\1\11\4\0\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\1\11\3\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[342];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return new Symbol(sym.FloatLiteral, yychar, yyline, yytext());
          }
        case 54: break;
        case 11: 
          { return new Symbol(sym.Equal, yychar, yyline, yytext());
          }
        case 55: break;
        case 10: 
          { return new Symbol(sym.BoolLiteral, yychar, yyline, yytext());
          }
        case 56: break;
        case 53: 
          { return new Symbol(sym.BracketClosure, yychar, yyline, yytext());
          }
        case 57: break;
        case 34: 
          { return new Symbol(sym.Read, yychar, yyline, yytext());
          }
        case 58: break;
        case 19: 
          { return new Symbol(sym.Break, yychar, yyline, yytext());
          }
        case 59: break;
        case 27: 
          { return new Symbol(sym.Switch, yychar, yyline, yytext());
          }
        case 60: break;
        case 8: 
          { return new Symbol(sym.StringLiteral, yychar, yyline, yytext());
          }
        case 61: break;
        case 5: 
          { return new Symbol(sym.Comma, yychar, yyline, yytext());
          }
        case 62: break;
        case 13: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 63: break;
        case 40: 
          { return new Symbol(sym.Conjunction, yychar, yyline, yytext());
          }
        case 64: break;
        case 25: 
          { return new Symbol(sym.Disjunction, yychar, yyline, yytext());
          }
        case 65: break;
        case 14: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 66: break;
        case 45: 
          { return new Symbol(sym.EndSentence, yychar, yyline, yytext());
          }
        case 67: break;
        case 31: 
          { return new Symbol(sym.AssignmentSign, yychar, yyline, yytext());
          }
        case 68: break;
        case 22: 
          { return new Symbol(sym.Char, yychar, yyline, yytext());
          }
        case 69: break;
        case 20: 
          { return new Symbol(sym.Print, yychar, yyline, yytext());
          }
        case 70: break;
        case 21: 
          { return new Symbol(sym.Bool, yychar, yyline, yytext());
          }
        case 71: break;
        case 38: 
          { return new Symbol(sym.Less, yychar, yyline, yytext());
          }
        case 72: break;
        case 28: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 73: break;
        case 49: 
          { return new Symbol(sym.BracketOpening, yychar, yyline, yytext());
          }
        case 74: break;
        case 32: 
          { return new Symbol(sym.Sum, yychar, yyline, yytext());
          }
        case 75: break;
        case 23: 
          { return new Symbol(sym.String, yychar, yyline, yytext());
          }
        case 76: break;
        case 24: 
          { return new Symbol(sym.Decrement, yychar, yyline, yytext());
          }
        case 77: break;
        case 9: 
          { return new Symbol(sym.Identifier, yychar, yyline, yytext());
          }
        case 78: break;
        case 52: 
          { return new Symbol(sym.BlockClosure, yychar, yyline, yytext());
          }
        case 79: break;
        case 26: 
          { return new Symbol(sym.Default, yychar, yyline, yytext());
          }
        case 80: break;
        case 43: 
          { return new Symbol(sym.LessEqual, yychar, yyline, yytext());
          }
        case 81: break;
        case 39: 
          { return new Symbol(sym.NotEqual, yychar, yyline, yytext());
          }
        case 82: break;
        case 50: 
          { return new Symbol(sym.Subtraction, yychar, yyline, yytext());
          }
        case 83: break;
        case 15: 
          { return new Symbol(sym.Modulo, yychar, yyline, yytext());
          }
        case 84: break;
        case 17: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 85: break;
        case 12: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 86: break;
        case 18: 
          { return new Symbol(sym.Colon, yychar, yyline, yytext());
          }
        case 87: break;
        case 42: 
          { return new Symbol(sym.Case, yychar, yyline, yytext());
          }
        case 88: break;
        case 35: 
          { return new Symbol(sym.Main, yychar, yyline, yytext());
          }
        case 89: break;
        case 51: 
          { return new Symbol(sym.ParenthesisClosure, yychar, yyline, yytext());
          }
        case 90: break;
        case 16: 
          { return new Symbol(sym.Increment, yychar, yyline, yytext());
          }
        case 91: break;
        case 48: 
          { return new Symbol(sym.BlockOpening, yychar, yyline, yytext());
          }
        case 92: break;
        case 44: 
          { return new Symbol(sym.Negation, yychar, yyline, yytext());
          }
        case 93: break;
        case 33: 
          { return new Symbol(sym.Greater, yychar, yyline, yytext());
          }
        case 94: break;
        case 30: 
          { return new Symbol(sym.GreaterEqual, yychar, yyline, yytext());
          }
        case 95: break;
        case 29: 
          { return new Symbol(sym.Integer, yychar, yyline, yytext());
          }
        case 96: break;
        case 4: 
          { return new Symbol(sym.Negative, yychar, yyline, yytext());
          }
        case 97: break;
        case 47: 
          { return new Symbol(sym.Multiplication, yychar, yyline, yytext());
          }
        case 98: break;
        case 1: 
          { return new Symbol(sym.Error, yychar, yyline, yytext());
          }
        case 99: break;
        case 41: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 100: break;
        case 2: 
          { return new Symbol(sym.Comment, yychar, yyline, yytext());
          }
        case 101: break;
        case 7: 
          { return new Symbol(sym.CharacterLiteral, yychar, yyline, yytext());
          }
        case 102: break;
        case 46: 
          { return new Symbol(sym.ParenthesisOpening, yychar, yyline, yytext());
          }
        case 103: break;
        case 3: 
          { return new Symbol(sym.IntegerLiteral, yychar, yyline, yytext());
          }
        case 104: break;
        case 37: 
          { return new Symbol(sym.Power, yychar, yyline, yytext());
          }
        case 105: break;
        case 36: 
          { return new Symbol(sym.Float, yychar, yyline, yytext());
          }
        case 106: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return new Symbol(sym.EndFile, yychar, yyline, yytext());
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
