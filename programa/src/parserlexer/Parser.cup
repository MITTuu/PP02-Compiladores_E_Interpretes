package parserlexer;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

parser code
{:
    private Symbol s;
    
    //Lista de errores controlados
    private List<String> errorList = new ArrayList<>();
    

    // Agrega errores controlados a la lista
    public void logError(Symbol s) {
        String error = "Error cerca de Linea: " + (s.right + 1) + " Columna: " + (s.left + 1) + ", Texto: \"" + s.value + "\"";
        errorList.add(error);
    }

    // Obtiene la lista de errores controlados
    public List<String> getErrorList() {
        return errorList;
    }

    // Gestiona errores recuperables -error-
    public void syntax_error(Symbol s){
        this.s = s;
        logError(s);
    }

    // Gestiona errores no recuperables
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String error = "\nError no recuperable:\n No se encontró final de sentencia (finregalo), \n o no se encontró final de bloque (cierracuento) \n o se determinó un error desconocido ";
        errorList.add(error);
    }

    // Método para obtener el Symbol donde se generó el error.
    public Symbol getS(){
        return this.s;
    }

    //Método para salida por consolda
    public void print(String prodName, Symbol s){
         String salida = "Encontrado " +prodName+ " : cerca de Linea: " + (s.right + 1) + " Columna: " + (s.left + 1) + ", Texto: \"" + s.value + "\"";
         System.out.println(salida); 
    }
:};

/* TERMINALS */

/* ---------- General ---------- */
terminal                        Main, Identifier;

/* ---------- Literals ---------- */
terminal                        IntegerLiteral, FloatLiteral, BoolLiteral, CharacterLiteral, StringLiteral;

/* ---------- Types ---------- */
terminal                        Integer, Float, Bool, Char, String;

/* ---------- Arrays ---------- */
terminal                        BracketOpening, BracketClosure;

/* ---------- Operators ---------- */
// Assignment sign
terminal                        AssignmentSign;

// Parenthesis
terminal                        ParenthesisOpening, ParenthesisClosure;

// Binary Arithmetic Operators
terminal                        Sum, Subtraction, Division, Multiplication, Module, Power;

// Unary Arithmetic Operators
terminal                        Increment, Decrement;

//Negative operator
terminal                        Negative;

// Relational Operators
terminal                        Less, LessEqual, Greater, GreaterEqual, Equal, NotEqual;

// Logical Operators
terminal                        Conjunction, Disjunction, Negation;

/* ---------- Blocks ---------- */
terminal                        BlockOpening, BlockClosure, EndSentence;                    

/* ---------- Control Structures ---------- */
terminal                        If, Else, While, For, Switch, Case, Default, Break, Return, Colon, Comma;

/* ---------- IO Operators ---------- */
terminal                        Print, Read;

/* ---------- NON TERMINALES ---------- */

non terminal PROGRAM, VARIABLE_TYPE, VARIABLE_DECLARATION, VARIABLE_ASSIGNMENT;
non terminal NEGATIVE_OPERATOR, PARAMETER_DECLARATION, PARAMETER_DECLARATION_LIST, PARAMETER_DECLARATION_OPTION; 
non terminal FUNCTION_DECLARATION,FUNCTION_CALL, FUNCTION_CALL_PARAMETER, FUNCTION_CALL_PARAMETER_LIST, FUNCTION_CALL_PARAMETER_OPTION, LITERALS ;
non terminal FUNCTION_DECLARATION_BODY, EXPRESSION, BINARY_ARITHMETIC_OPERATOR, ARITHMETIC_EXPRESSION, SIMPLE_EXPRESSION;
non terminal FUNCTION_BODY_ELEMENT, NEGATIVE_LITERAL, UNARY_ARITHMETIC_EXPRESSION;
non terminal CONTROL_STRUCTURE, IF_STRUCTURE, WHILE_STRUCTURE, FOR_STRUCTURE, SWITCH_STRUCTURE,CASES, CASE, RETURN_STATEMENT, BREAK_STATEMENT;
non terminal PRINT_STATEMENT, READ_STATEMENT, RELATIONAL_EXPRESSION, LOGICAL_EXPRESSION, EXPRESSION_LIST, FUNCTION_NAME, ARRAY_DECLARATION,ARRAY_USE;
non terminal ARRAY_ELEMENTS, LITERAL_LIST, ELSE_STRUCTURE, ELSE_IF_STRUCTURE, IF_ELSE_STRUCTURE_TYPE, UPDATE_EXPRESSION, RELATIONAL_OPERATOR;
non terminal INIT_FOR_STRUCTURE, SWITCH_EXPRESSION, CASE_LABEL, FUNCTION_CALL_EXPRESSION;

/* ---------- Precedences ---------- */

precedence left Disjunction;
precedence left Conjunction;
precedence right Negation;
precedence left Less, LessEqual, Greater, GreaterEqual, Equal, NotEqual;
precedence left Sum, Subtraction;
precedence left Multiplication, Division, Module; 
precedence right Power;
precedence right AssignmentSign; 

// Declaración del non terminal inicial
start with PROGRAM;

// Definición del non terminal inicial
PROGRAM ::= /* Vacío */ 
          | PROGRAM FUNCTION_DECLARATION
          ;

FUNCTION_DECLARATION ::= VARIABLE_TYPE FUNCTION_NAME ParenthesisOpening PARAMETER_DECLARATION_OPTION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure                       
                       ;


FUNCTION_DECLARATION_BODY ::= FUNCTION_BODY_ELEMENT 
                            | FUNCTION_DECLARATION_BODY FUNCTION_BODY_ELEMENT 
                            ;

FUNCTION_BODY_ELEMENT ::= VARIABLE_DECLARATION 
                        | VARIABLE_ASSIGNMENT 
                        | FUNCTION_CALL_EXPRESSION 
                        | CONTROL_STRUCTURE
                        | PRINT_STATEMENT 
                        | READ_STATEMENT
                        | RETURN_STATEMENT
                        | BREAK_STATEMENT
                        | error
                        ;

PRINT_STATEMENT ::= Print ParenthesisOpening EXPRESSION ParenthesisClosure EndSentence;

READ_STATEMENT ::= Read ParenthesisOpening Identifier ParenthesisClosure EndSentence;

VARIABLE_TYPE ::= Integer 
                | Float 
                | String 
                | Bool 
                | Char
                ;

ARRAY_DECLARATION ::= VARIABLE_TYPE Identifier BracketOpening  BracketClosure 
                    | VARIABLE_TYPE Identifier BracketOpening Integer BracketClosure 
                    | VARIABLE_TYPE Identifier BracketOpening Identifier BracketClosure 
                    ;

ARRAY_USE ::= Identifier BracketOpening Integer BracketClosure 
            | Identifier BracketOpening Identifier BracketClosure
            ;

BINARY_ARITHMETIC_OPERATOR ::= Sum 
                             | Subtraction 
                             | Multiplication 
                             | Division 
                             | Module 
                             | Power;

NEGATIVE_OPERATOR ::= Negative; 

LITERALS ::= IntegerLiteral 
           | FloatLiteral 
           | BoolLiteral 
           | CharacterLiteral 
           | StringLiteral;

FUNCTION_NAME ::= Identifier
                | Main
                ;

FUNCTION_CALL_PARAMETER ::= SIMPLE_EXPRESSION;

FUNCTION_CALL_PARAMETER_LIST ::= FUNCTION_CALL_PARAMETER 
                               | FUNCTION_CALL_PARAMETER Comma FUNCTION_CALL_PARAMETER_LIST;

FUNCTION_CALL_PARAMETER_OPTION ::= /* Vacío */ 
                                 | FUNCTION_CALL_PARAMETER_LIST;

FUNCTION_CALL ::= FUNCTION_NAME ParenthesisOpening FUNCTION_CALL_PARAMETER_OPTION  ParenthesisClosure;

FUNCTION_CALL_EXPRESSION ::= FUNCTION_CALL EndSentence
                           ;

PARAMETER_DECLARATION::= VARIABLE_TYPE Identifier;

PARAMETER_DECLARATION_LIST ::= PARAMETER_DECLARATION 
                             | PARAMETER_DECLARATION Comma PARAMETER_DECLARATION_LIST;

PARAMETER_DECLARATION_OPTION ::= /* Vacío */ 
                               | PARAMETER_DECLARATION_LIST;

NEGATIVE_LITERAL ::= NEGATIVE_OPERATOR IntegerLiteral 
                   | NEGATIVE_OPERATOR FloatLiteral;

UNARY_ARITHMETIC_EXPRESSION ::= Identifier Increment 
                              | Identifier Decrement;


EXPRESSION ::= NEGATIVE_LITERAL 
             | ARITHMETIC_EXPRESSION
             | LOGICAL_EXPRESSION             
             ;


SIMPLE_EXPRESSION ::= Identifier                     
                    | LITERALS
                    | ARRAY_USE
                    | FUNCTION_CALL
                    | UNARY_ARITHMETIC_EXPRESSION
                    | ParenthesisOpening EXPRESSION ParenthesisClosure
                    ;

ARITHMETIC_EXPRESSION ::= SIMPLE_EXPRESSION
                        | ARITHMETIC_EXPRESSION BINARY_ARITHMETIC_OPERATOR ARITHMETIC_EXPRESSION
                        ;

RELATIONAL_OPERATOR ::= Less 
                      | LessEqual 
                      | Greater
                      | GreaterEqual
                      | Equal
                      | NotEqual
                      ;

RELATIONAL_EXPRESSION ::= ARITHMETIC_EXPRESSION RELATIONAL_OPERATOR ARITHMETIC_EXPRESSION;

LOGICAL_EXPRESSION ::= RELATIONAL_EXPRESSION
                     | Negation LOGICAL_EXPRESSION
                     | LOGICAL_EXPRESSION Conjunction RELATIONAL_EXPRESSION 
                     | LOGICAL_EXPRESSION Disjunction RELATIONAL_EXPRESSION
                     | LOGICAL_EXPRESSION Conjunction ARITHMETIC_EXPRESSION 
                     | LOGICAL_EXPRESSION Disjunction ARITHMETIC_EXPRESSION
                     ;

VARIABLE_DECLARATION ::= VARIABLE_TYPE Identifier EndSentence 
                       | VARIABLE_TYPE Identifier AssignmentSign EXPRESSION EndSentence 
                       | ARRAY_DECLARATION EndSentence 
                       | ARRAY_DECLARATION AssignmentSign ARRAY_ELEMENTS EndSentence
                       ;

ARRAY_ELEMENTS ::= BlockOpening LITERAL_LIST BlockClosure
                 ;

LITERAL_LIST ::= LITERALS
               | LITERAL_LIST Comma LITERALS
               ;

EXPRESSION_LIST ::= EXPRESSION 
                  | EXPRESSION Comma EXPRESSION_LIST;

VARIABLE_ASSIGNMENT ::= Identifier AssignmentSign EXPRESSION EndSentence
                      | UNARY_ARITHMETIC_EXPRESSION EndSentence
                      | Identifier AssignmentSign ARRAY_ELEMENTS EndSentence //Para asignación de arreglo de elementos
                      | ARRAY_USE AssignmentSign EXPRESSION EndSentence //Para asignación de un elemento en el arreglo
                      ;

CONTROL_STRUCTURE ::= IF_ELSE_STRUCTURE_TYPE 
                    | WHILE_STRUCTURE
                    | FOR_STRUCTURE
                    | SWITCH_STRUCTURE
                    ;

IF_STRUCTURE ::= If ParenthesisOpening LOGICAL_EXPRESSION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure ;

ELSE_STRUCTURE ::= Else BlockOpening FUNCTION_DECLARATION_BODY BlockClosure ;

ELSE_IF_STRUCTURE ::= Else If ParenthesisOpening LOGICAL_EXPRESSION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
                    | ELSE_IF_STRUCTURE ELSE_STRUCTURE
                    ;

IF_ELSE_STRUCTURE_TYPE ::= IF_STRUCTURE
                         | IF_STRUCTURE ELSE_STRUCTURE
                         | IF_STRUCTURE ELSE_IF_STRUCTURE
                         ;

WHILE_STRUCTURE ::= While ParenthesisOpening LOGICAL_EXPRESSION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure;

FOR_STRUCTURE ::= For ParenthesisOpening INIT_FOR_STRUCTURE LOGICAL_EXPRESSION EndSentence UPDATE_EXPRESSION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure;

INIT_FOR_STRUCTURE ::= VARIABLE_DECLARATION
                     | VARIABLE_ASSIGNMENT
                     ;

UPDATE_EXPRESSION ::= UNARY_ARITHMETIC_EXPRESSION
                    | Identifier AssignmentSign EXPRESSION
                    ;

SWITCH_STRUCTURE ::= Switch ParenthesisOpening SWITCH_EXPRESSION ParenthesisClosure BlockOpening CASES  BlockClosure;

CASES ::= CASE 
        | CASE CASES;

CASE ::= Case CASE_LABEL Colon FUNCTION_DECLARATION_BODY
       | Default Colon FUNCTION_DECLARATION_BODY
       ;

SWITCH_EXPRESSION ::= Identifier                      
                    | Integer 
                    | Char 
                    | ARRAY_USE
                    | FUNCTION_CALL
                    | UNARY_ARITHMETIC_EXPRESSION
                    | ParenthesisOpening EXPRESSION ParenthesisClosure
                    ;

CASE_LABEL ::= Identifier                      
             | IntegerLiteral 
             | CharacterLiteral
             ;

RETURN_STATEMENT ::= Return EndSentence
                   | Return EXPRESSION EndSentence
                   ;

BREAK_STATEMENT ::= Break EndSentence ;
