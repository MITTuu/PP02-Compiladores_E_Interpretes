package parserlexer;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
     
    public void syntax_error(Symbol s){
        this.s = s;
    }   

    public Symbol getS(){
        return this.s;
    }
:};

/* TERMINALS */

/* ---------- General ---------- */
terminal                        Main, Identifier, Error;

/* ---------- Literals ---------- */
terminal                        IntegerLiteral, FloatLiteral, BoolLiteral, CharacterLiteral, StringLiteral;

/* ---------- Types ---------- */
terminal                        Integer, Float, Bool, Char, String;

/* ---------- Arrays ---------- */
terminal                        BracketOpening, BracketClosure;

/* ---------- Operators ---------- */
// Assignment sign
terminal                        AssignmentSign;

// Parenthesis
terminal                        ParenthesisOpening, ParenthesisClosure;

// Binary Arithmetic Operators
terminal                        Sum, Subtraction, Division, Multiplication, Module, Power;

// Unary Arithmetic Operators
terminal                        Increment, Decrement;

//Negative operator
terminal                        Negative;

// Relational Operators
terminal                        Less, LessEqual, Greater, GreaterEqual, Equal, NotEqual;

// Logical Operators
terminal                        Conjunction, Disjunction, Negation;

/* ---------- Blocks ---------- */
terminal                        BlockOpening, BlockClosure, EndSentence;                    

/* ---------- Control Structures ---------- */
terminal                        If, Else, While, For, Switch, Case, Default, Break, Return, Colon, Comma;

/* ---------- IO Operators ---------- */
terminal                        Print, Read;

/* ---------- NON TERMINALES ---------- */

non terminal PROGRAM, VARIABLE_TYPE, VARIABLE_DECLARATION, EXPRESSION, VARIABLE_ASSIGNMENT, BINARY_ARITHMETIC_OPERATOR, UNARY_ARITHMETIC_OPERATOR, ARITHMETIC_EXPRESSION;
non terminal NEGATIVE_OPERATOR, PARAMETER, PARAMETER_LIST; 
non terminal FUNCTION_DECLARATION,FUNCTION_CALL;

// Declaración del non terminal inicial
start with PROGRAM;

// Definición del non terminal inicial
PROGRAM ::=
        /* Vacío */ |  
        PROGRAM VARIABLE_TYPE |
        PROGRAM BINARY_ARITHMETIC_OPERATOR|
        PROGRAM UNARY_ARITHMETIC_OPERATOR|
        PROGRAM NEGATIVE_OPERATOR |
        PROGRAM PARAMETER_LIST
        ;

VARIABLE_TYPE ::= Integer | Float | String | Bool | Char ;

BINARY_ARITHMETIC_OPERATOR ::= Sum | Subtraction | Multiplication | Division |  Module | Power;

UNARY_ARITHMETIC_OPERATOR ::= Increment | Decrement;

NEGATIVE_OPERATOR ::= Negative; 

PARAMETER::= VARIABLE_TYPE Identifier;

PARAMETER_LIST ::=  PARAMETER |
                    PARAMETER Comma PARAMETER_LIST
                    ;












// VARIABLE_DECLARATION ::= VARIABLE_TYPE Identifier EndSentence | VARIABLE_TYPE Identifier AssignmentSign EXPRESSION EndSentence;

// VARIABLE_ASSIGNMENT ::= Identifier AssignmentSign EXPRESSION EndSentence;

// EXPRESSION ::= IntegerLiteral | FloatLiteral | StringLiteral | ARITHMETIC_EXPRESSION | FUNCTION_CALL;

// ARITHMETIC_EXPRESSION ::= EXPRESSION ARITHMETIC_OPERATOR EXPRESSION;
// FUNCTION_DECLARATION ::= VARIABLE_TYPE Identifier ParenthesisOpening PARAMETER_LIST ParenthesisClosure BlockOpening BlockClosure;

// FUNCTION_CALL ::= Identifier ParenthesisOpening PARAMETER_LIST ParenthesisClosure EndSentence;


