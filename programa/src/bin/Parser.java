
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 08 07:28:14 CST 2025
//----------------------------------------------------

package bin;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 08 07:28:14 CST 2025
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\002\005\000\002\002\005\000\002\012\012" +
    "\000\002\020\003\000\002\020\004\000\002\020\005\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\006\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\003\000" +
    "\002\015\005\000\002\016\002\000\002\016\003\000\002" +
    "\013\007\000\002\007\004\000\002\010\003\000\002\010" +
    "\005\000\002\011\002\000\002\011\003\000\002\025\003" +
    "\000\002\025\003\000\002\024\005\000\002\021\003\000" +
    "\002\021\003\000\002\004\005\000\002\004\007\000\002" +
    "\005\006\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\030\011\000\002\030\015\000\002\031\011\000" +
    "\002\032\015\000\002\033\014\000\002\034\003\000\002" +
    "\034\004\000\002\035\010\000\002\036\005\000\002\037" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\020\002\000\003\000\014\000\015\000\016" +
    "\000\017\000\020\000\001\002\000\020\002\011\003\013" +
    "\014\006\015\005\016\012\017\010\020\015\001\002\000" +
    "\004\005\ufff3\001\002\000\004\005\ufff4\001\002\000\004" +
    "\005\020\001\002\000\004\005\ufff0\001\002\000\004\002" +
    "\001\001\002\000\004\005\ufff1\001\002\000\006\051\017" +
    "\052\016\001\002\000\020\002\uffff\003\uffff\014\uffff\015" +
    "\uffff\016\uffff\017\uffff\020\uffff\001\002\000\004\005\ufff2" +
    "\001\002\000\020\002\ufffe\003\ufffe\014\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\001\002\000\020\002\ufffd\003\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\001\002\000" +
    "\004\024\021\001\002\000\016\014\006\015\005\016\012" +
    "\017\010\020\015\025\uffd7\001\002\000\004\005\205\001" +
    "\002\000\006\025\uffd9\065\203\001\002\000\004\025\026" +
    "\001\002\000\004\025\uffd6\001\002\000\004\050\027\001" +
    "\002\000\032\005\040\014\006\015\005\016\012\017\010" +
    "\020\015\053\043\055\050\056\033\057\046\062\036\063" +
    "\044\001\002\000\036\003\uffc8\005\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\051\uffc8\053\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\062\uffc8\063\uffc8\001\002\000\036\003\uffcd" +
    "\005\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\051" +
    "\uffcd\053\uffcd\055\uffcd\056\uffcd\057\uffcd\062\uffcd\063\uffcd" +
    "\001\002\000\036\003\uffcc\005\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\051\uffcc\053\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\062\uffcc\063\uffcc\001\002\000\004\024\170\001" +
    "\002\000\036\003\uffcb\005\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\051\uffcb\053\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\062\uffcb\063\uffcb\001\002\000\036\003\ufff6\005\ufff6" +
    "\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\051\ufff6\053" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\062\ufff6\063\ufff6\001\002" +
    "\000\004\052\167\001\002\000\036\003\ufff5\005\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\051\ufff5\053\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\062\ufff5\063\ufff5\001\002\000" +
    "\006\023\164\024\107\001\002\000\036\003\075\005\040" +
    "\014\006\015\005\016\012\017\010\020\015\051\163\053" +
    "\043\055\050\056\033\057\046\062\036\063\044\001\002" +
    "\000\004\005\156\001\002\000\004\024\144\001\002\000" +
    "\016\005\062\007\063\010\066\011\056\012\060\013\055" +
    "\001\002\000\036\003\ufffb\005\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\051\ufffb\053\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\062\ufffb\063\ufffb\001\002\000\004\024\121\001" +
    "\002\000\036\003\uffca\005\uffca\014\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\051\uffca\053\uffca\055\uffca\056\uffca\057" +
    "\uffca\062\uffca\063\uffca\001\002\000\004\024\054\001\002" +
    "\000\036\003\uffc9\005\uffc9\014\uffc9\015\uffc9\016\uffc9\017" +
    "\uffc9\020\uffc9\051\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\062\uffc9\063\uffc9\001\002\000\036\003\ufff8\005\ufff8\014" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\051\ufff8\053\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\062\ufff8\063\ufff8\001\002\000" +
    "\036\003\ufff7\005\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\051\ufff7\053\ufff7\055\ufff7\056\ufff7\057\ufff7\062" +
    "\ufff7\063\ufff7\001\002\000\016\005\062\007\063\010\066" +
    "\011\056\012\060\013\055\001\002\000\026\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\052\uffe2" +
    "\064\uffe2\065\uffe2\001\002\000\026\025\uffe4\026\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\052\uffe4\064\uffe4" +
    "\065\uffe4\001\002\000\022\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\052\uffd5\001\002\000\026" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\052\uffe3\064\uffe3\065\uffe3\001\002\000\006\025\uffd1" +
    "\052\uffd1\001\002\000\004\024\107\001\002\000\026\025" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\052\uffe6\064\uffe6\065\uffe6\001\002\000\022\025\uffd2\026" +
    "\101\027\104\030\100\031\102\032\103\033\077\052\uffd2" +
    "\001\002\000\004\025\070\001\002\000\026\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\052\uffe5" +
    "\064\uffe5\065\uffe5\001\002\000\022\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\052\uffd4\001\002" +
    "\000\004\050\071\001\002\000\032\005\040\014\006\015" +
    "\005\016\012\017\010\020\015\053\043\055\050\056\033" +
    "\057\046\062\036\063\044\001\002\000\036\003\075\005" +
    "\040\014\006\015\005\016\012\017\010\020\015\051\073" +
    "\053\043\055\050\056\033\057\046\062\036\063\044\001" +
    "\002\000\036\003\uffc5\005\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\017\uffc5\020\uffc5\051\uffc5\053\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\062\uffc5\063\uffc5\001\002\000\036\003\ufffa\005\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\051\ufffa\053" +
    "\ufffa\055\ufffa\056\ufffa\057\ufffa\062\ufffa\063\ufffa\001\002" +
    "\000\004\052\076\001\002\000\036\003\ufff9\005\ufff9\014" +
    "\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\051\ufff9\053\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\062\ufff9\063\ufff9\001\002\000" +
    "\016\005\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea" +
    "\001\002\000\016\005\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\013\uffec\001\002\000\016\005\uffef\007\uffef\010\uffef" +
    "\011\uffef\012\uffef\013\uffef\001\002\000\016\005\uffed\007" +
    "\uffed\010\uffed\011\uffed\012\uffed\013\uffed\001\002\000\016" +
    "\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\001" +
    "\002\000\016\005\uffee\007\uffee\010\uffee\011\uffee\012\uffee" +
    "\013\uffee\001\002\000\016\005\062\007\063\010\066\011" +
    "\056\012\060\013\055\001\002\000\006\025\uffd3\052\uffd3" +
    "\001\002\000\020\005\113\007\063\010\066\011\056\012" +
    "\060\013\055\025\uffdd\001\002\000\004\025\117\001\002" +
    "\000\006\025\uffe0\065\uffe0\001\002\000\004\025\uffdc\001" +
    "\002\000\006\025\uffe1\065\uffe1\001\002\000\006\025\uffdf" +
    "\065\115\001\002\000\016\005\113\007\063\010\066\011" +
    "\056\012\060\013\055\001\002\000\004\025\uffde\001\002" +
    "\000\004\052\120\001\002\000\056\003\uffdb\005\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\055\uffdb\056\uffdb\057\uffdb\062\uffdb\063\uffdb" +
    "\001\002\000\016\005\062\007\063\010\066\011\056\012" +
    "\060\013\055\001\002\000\004\025\123\001\002\000\004" +
    "\050\124\001\002\000\004\060\125\001\002\000\014\007" +
    "\063\010\066\011\056\012\060\013\055\001\002\000\004" +
    "\061\131\001\002\000\006\060\125\061\uffc2\001\002\000" +
    "\004\061\uffc1\001\002\000\004\064\132\001\002\000\032" +
    "\005\040\014\006\015\005\016\012\017\010\020\015\053" +
    "\043\055\050\056\033\057\046\062\036\063\044\001\002" +
    "\000\036\003\075\005\040\014\006\015\005\016\012\017" +
    "\010\020\015\051\134\053\043\055\050\056\033\057\046" +
    "\062\036\063\044\001\002\000\036\003\uffc3\005\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\051\uffc3\053\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\062\uffc3\063\uffc3\001\002\000" +
    "\004\064\136\001\002\000\032\005\040\014\006\015\005" +
    "\016\012\017\010\020\015\053\043\055\050\056\033\057" +
    "\046\062\036\063\044\001\002\000\034\003\075\005\040" +
    "\014\006\015\005\016\012\017\010\020\015\053\043\055" +
    "\050\056\033\057\046\062\140\063\044\001\002\000\004" +
    "\052\141\001\002\000\040\003\uffbe\005\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\053\uffbe\055\uffbe\056\uffbe" +
    "\057\uffbe\060\uffc0\061\uffc0\062\uffbe\063\uffbe\001\002\000" +
    "\004\052\143\001\002\000\036\003\uffbf\005\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\051\uffbf\053\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\062\uffbf\063\uffbf\001\002\000\016" +
    "\005\062\007\063\010\066\011\056\012\060\013\055\001" +
    "\002\000\004\025\146\001\002\000\004\050\147\001\002" +
    "\000\032\005\040\014\006\015\005\016\012\017\010\020" +
    "\015\053\043\055\050\056\033\057\046\062\036\063\044" +
    "\001\002\000\036\003\075\005\040\014\006\015\005\016" +
    "\012\017\010\020\015\051\151\053\043\055\050\056\033" +
    "\057\046\062\036\063\044\001\002\000\040\003\uffc7\005" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\051\uffc7" +
    "\053\uffc7\054\152\055\uffc7\056\uffc7\057\uffc7\062\uffc7\063" +
    "\uffc7\001\002\000\004\050\153\001\002\000\032\005\040" +
    "\014\006\015\005\016\012\017\010\020\015\053\043\055" +
    "\050\056\033\057\046\062\036\063\044\001\002\000\036" +
    "\003\075\005\040\014\006\015\005\016\012\017\010\020" +
    "\015\051\155\053\043\055\050\056\033\057\046\062\036" +
    "\063\044\001\002\000\036\003\uffc6\005\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\051\uffc6\053\uffc6\055\uffc6" +
    "\056\uffc6\057\uffc6\062\uffc6\063\uffc6\001\002\000\006\023" +
    "\160\052\157\001\002\000\040\003\uffd0\005\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\051\uffd0\052\uffd0\053" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\062\uffd0\063\uffd0\001\002" +
    "\000\016\005\062\007\063\010\066\011\056\012\060\013" +
    "\055\001\002\000\004\052\162\001\002\000\040\003\uffcf" +
    "\005\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\051" +
    "\uffcf\052\uffcf\053\uffcf\055\uffcf\056\uffcf\057\uffcf\062\uffcf" +
    "\063\uffcf\001\002\000\020\002\ufffc\003\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\001\002\000\016\005\062" +
    "\007\063\010\066\011\056\012\060\013\055\001\002\000" +
    "\004\052\166\001\002\000\040\003\uffce\005\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\025\uffce\051\uffce\053" +
    "\uffce\055\uffce\056\uffce\057\uffce\062\uffce\063\uffce\001\002" +
    "\000\036\003\uffbe\005\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\020\uffbe\051\uffbe\053\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\062\uffbe\063\uffbe\001\002\000\014\014\006\015\005\016" +
    "\012\017\010\020\015\001\002\000\004\052\172\001\002" +
    "\000\016\005\062\007\063\010\066\011\056\012\060\013" +
    "\055\001\002\000\004\052\174\001\002\000\004\005\176" +
    "\001\002\000\004\025\177\001\002\000\004\023\164\001" +
    "\002\000\004\050\200\001\002\000\032\005\040\014\006" +
    "\015\005\016\012\017\010\020\015\053\043\055\050\056" +
    "\033\057\046\062\036\063\044\001\002\000\036\003\075" +
    "\005\040\014\006\015\005\016\012\017\010\020\015\051" +
    "\202\053\043\055\050\056\033\057\046\062\036\063\044" +
    "\001\002\000\036\003\uffc4\005\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\051\uffc4\053\uffc4\055\uffc4\056\uffc4" +
    "\057\uffc4\062\uffc4\063\uffc4\001\002\000\014\014\006\015" +
    "\005\016\012\017\010\020\015\001\002\000\004\025\uffd8" +
    "\001\002\000\006\025\uffda\065\uffda\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\002\003\001\001\000\006\003\006\012" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\021\007\022\010\024\011\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\041\004\051\005\052" +
    "\013\034\020\040\026\044\027\036\030\030\031\031\032" +
    "\033\033\046\036\050\037\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\041\004\051\005" +
    "\052\013\034\026\073\027\036\030\030\031\031\032\033" +
    "\033\046\036\050\037\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\013\066\017\056\021\141\024\060" +
    "\025\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\066\017\056\021" +
    "\064\024\060\025\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\041\004\051\005\052" +
    "\013\034\020\071\026\044\027\036\030\030\031\031\032" +
    "\033\033\046\036\050\037\027\001\001\000\032\003\041" +
    "\004\051\005\052\013\034\026\073\027\036\030\030\031" +
    "\031\032\033\033\046\036\050\037\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\013\066\017\056\021\105\024\060\025\063\001\001" +
    "\000\002\001\001\000\012\014\113\015\111\016\107\017" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\113\015\115\017\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\066\017\056\021" +
    "\121\024\060\025\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\125\035\126\001\001\000\004\017" +
    "\134\001\001\000\002\001\001\000\006\034\127\035\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\041\004\051\005\052\013\034\020\132\026\044\027\036" +
    "\030\030\031\031\032\033\033\046\036\050\037\027\001" +
    "\001\000\032\003\041\004\051\005\052\013\034\026\073" +
    "\027\036\030\030\031\031\032\033\033\046\036\050\037" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\041\004\051\005\052\013\034\020\136\026\044\027" +
    "\036\030\030\031\031\032\033\033\046\036\050\037\027" +
    "\001\001\000\032\003\041\004\051\005\052\013\034\026" +
    "\073\027\036\030\030\031\031\032\033\033\046\036\050" +
    "\037\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\066\017\056" +
    "\021\144\024\060\025\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\041\004\051\005\052\013\034" +
    "\020\147\026\044\027\036\030\030\031\031\032\033\033" +
    "\046\036\050\037\027\001\001\000\032\003\041\004\051" +
    "\005\052\013\034\026\073\027\036\030\030\031\031\032" +
    "\033\033\046\036\050\037\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\041\004\051\005\052\013" +
    "\034\020\153\026\044\027\036\030\030\031\031\032\033" +
    "\033\046\036\050\037\027\001\001\000\032\003\041\004" +
    "\051\005\052\013\034\026\073\027\036\030\030\031\031" +
    "\032\033\033\046\036\050\037\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\066" +
    "\017\056\021\160\024\060\025\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\066" +
    "\017\056\021\164\024\060\025\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\041" +
    "\004\170\001\001\000\002\001\001\000\014\013\066\017" +
    "\056\021\172\024\060\025\063\001\001\000\002\001\001" +
    "\000\004\005\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\041\004\051\005\052" +
    "\013\034\020\200\026\044\027\036\030\030\031\031\032" +
    "\033\033\046\036\050\037\027\001\001\000\032\003\041" +
    "\004\051\005\052\013\034\026\073\027\036\030\030\031" +
    "\031\032\033\033\046\036\050\037\027\001\001\000\002" +
    "\001\001\000\010\003\021\007\022\010\203\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    //Lista de errores controlados
    private List<String> errorList = new ArrayList<>();
    

    // Agrega errores controlados a la lista
    public void logError(Symbol s) {
        String error = "Error cerca de Linea: " + (s.right + 1) + " Columna: " + (s.left + 1) + ", Texto: \"" + s.value + "\"";
        errorList.add(error);
    }

    // Obtiene la lista de errores controlados
    public List<String> getErrorList() {
        return errorList;
    }

    // Gestiona errores recuperables -error-
    public void syntax_error(Symbol s){
        this.s = s;
        logError(s);
    }

    // Gestiona errores no recuperables
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String error = "\nError no recuperable:\n No se encontró final de sentencia (finregalo), \n o no se encontró final de bloque (cierracuento) \n o se determinó un error desconocido ";
        errorList.add(error);
    }

    // Método para obtener el Symbol donde se generó el error.
    public Symbol getS(){
        return this.s;
    }

    //Método para salida por consolda
    public void print(String prodName, Symbol s){
         String salida = "Encontrado " +prodName+ " : cerca de Linea: " + (s.right + 1) + " Columna: " + (s.left + 1) + ", Texto: \"" + s.value + "\"";
         System.out.println(salida); 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BREAK_STATEMENT ::= Break EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RETURN_STATEMENT ::= Return EXPRESSION EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STATEMENT",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASE ::= Case LITERALS Colon FUNCTION_DECLARATION_BODY Break EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SWITCH_STRUCTURE ::= Switch ParenthesisOpening EXPRESSION ParenthesisClosure BlockOpening CASES Default Colon FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_STRUCTURE",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR_STRUCTURE ::= For ParenthesisOpening VARIABLE_DECLARATION EndSentence EXPRESSION EndSentence VARIABLE_ASSIGNMENT ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STRUCTURE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WHILE_STRUCTURE ::= While ParenthesisOpening EXPRESSION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STRUCTURE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF_STRUCTURE ::= If ParenthesisOpening EXPRESSION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure Else BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF_STRUCTURE ::= If ParenthesisOpening EXPRESSION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONTROL_STRUCTURE ::= BREAK_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONTROL_STRUCTURE ::= RETURN_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONTROL_STRUCTURE ::= SWITCH_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONTROL_STRUCTURE ::= FOR_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONTROL_STRUCTURE ::= WHILE_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTROL_STRUCTURE ::= IF_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIABLE_ASSIGNMENT ::= Identifier AssignmentSign EXPRESSION EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_ASSIGNMENT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIABLE_DECLARATION ::= VARIABLE_TYPE Identifier AssignmentSign EXPRESSION EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARIABLE_DECLARATION ::= VARIABLE_TYPE Identifier EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESSION ::= ARITHMETIC_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESSION ::= SIMPLE_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARITHMETIC_EXPRESSION ::= SIMPLE_EXPRESSION BINARY_ARITHMETIC_OPERATOR EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETIC_EXPRESSION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIMPLE_EXPRESSION ::= FUNCTION_CALL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SIMPLE_EXPRESSION ::= LITERALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETER_DECLARATION_OPTION ::= PARAMETER_DECLARATION_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION_OPTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETER_DECLARATION_OPTION ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION_OPTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PARAMETER_DECLARATION_LIST ::= PARAMETER_DECLARATION Comma PARAMETER_DECLARATION_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION_LIST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PARAMETER_DECLARATION_LIST ::= PARAMETER_DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION_LIST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PARAMETER_DECLARATION ::= VARIABLE_TYPE Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCTION_CALL ::= Identifier ParenthesisOpening FUNCTION_CALL_PARAMETER_OPTION ParenthesisClosure EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCTION_CALL_PARAMETER_OPTION ::= FUNCTION_CALL_PARAMETER_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER_OPTION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCTION_CALL_PARAMETER_OPTION ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER_OPTION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCTION_CALL_PARAMETER_LIST ::= FUNCTION_CALL_PARAMETER Comma FUNCTION_CALL_PARAMETER_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER_LIST",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FUNCTION_CALL_PARAMETER_LIST ::= FUNCTION_CALL_PARAMETER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER_LIST",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FUNCTION_CALL_PARAMETER ::= LITERALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FUNCTION_CALL_PARAMETER ::= Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LITERALS ::= StringLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LITERALS ::= CharacterLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LITERALS ::= BoolLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LITERALS ::= FloatLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LITERALS ::= IntegerLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NEGATIVE_OPERATOR ::= Negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEGATIVE_OPERATOR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // UNARY_ARITHMETIC_OPERATOR ::= Decrement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_ARITHMETIC_OPERATOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // UNARY_ARITHMETIC_OPERATOR ::= Increment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_ARITHMETIC_OPERATOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BINARY_ARITHMETIC_OPERATOR ::= Power 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BINARY_ARITHMETIC_OPERATOR ::= Module 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BINARY_ARITHMETIC_OPERATOR ::= Division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BINARY_ARITHMETIC_OPERATOR ::= Multiplication 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BINARY_ARITHMETIC_OPERATOR ::= Subtraction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BINARY_ARITHMETIC_OPERATOR ::= Sum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLE_TYPE ::= Char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLE_TYPE ::= Bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VARIABLE_TYPE ::= String 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VARIABLE_TYPE ::= Float 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VARIABLE_TYPE ::= Integer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCTION_BODY_ELEMENT ::= CONTROL_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY_ELEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCTION_BODY_ELEMENT ::= FUNCTION_CALL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY_ELEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCTION_BODY_ELEMENT ::= VARIABLE_ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY_ELEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCTION_BODY_ELEMENT ::= VARIABLE_DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY_ELEMENT",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCTION_DECLARATION_BODY ::= FUNCTION_DECLARATION_BODY error EndSentence 
            {
              Object RESULT =null;
		Symbol s = (Symbol)CUP$Parser$stack.peek(); parser.print("EndSentence",s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_BODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCTION_DECLARATION_BODY ::= FUNCTION_DECLARATION_BODY FUNCTION_BODY_ELEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_BODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCTION_DECLARATION_BODY ::= FUNCTION_BODY_ELEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_BODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCTION_DECLARATION ::= VARIABLE_TYPE Identifier ParenthesisOpening PARAMETER_DECLARATION_OPTION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= PROGRAM error BlockClosure 
            {
              Object RESULT =null;
		Symbol s = (Symbol)CUP$Parser$stack.peek(); parser.print("BlockClosure",s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= PROGRAM error EndSentence 
            {
              Object RESULT =null;
		Symbol s = (Symbol)CUP$Parser$stack.peek(); parser.print("EndSentence",s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PROGRAM FUNCTION_DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

