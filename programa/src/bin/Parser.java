
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 12 01:22:40 CST 2025
//----------------------------------------------------

package bin;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 12 01:22:40 CST 2025
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\002\000\002\002" +
    "\004\000\002\002\005\000\002\002\005\000\002\012\012" +
    "\000\002\020\003\000\002\020\004\000\002\020\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\041" +
    "\007\000\002\042\007\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\006\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\006\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\005\000\002\016\002\000\002\016\003\000\002\013" +
    "\007\000\002\007\004\000\002\010\003\000\002\010\005" +
    "\000\002\011\002\000\002\011\003\000\002\026\004\000" +
    "\002\026\004\000\002\027\004\000\002\027\004\000\002" +
    "\024\003\000\002\024\006\000\002\024\003\000\002\024" +
    "\003\000\002\023\005\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\005\000\002\043\005\000\002" +
    "\043\005\000\002\043\005\000\002\043\005\000\002\043" +
    "\005\000\002\043\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\004\000\002\004\005\000\002\004\007\000" +
    "\002\004\010\000\002\004\011\000\002\045\003\000\002" +
    "\045\005\000\002\005\006\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\031\011\000\002\031\015\000" +
    "\002\032\011\000\002\033\015\000\002\034\014\000\002" +
    "\035\003\000\002\035\004\000\002\036\010\000\002\037" +
    "\005\000\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\020\002\000\003\000\014\000\015\000\016" +
    "\000\017\000\020\000\001\002\000\020\002\011\003\013" +
    "\014\006\015\005\016\012\017\010\020\015\001\002\000" +
    "\006\005\uffef\021\uffef\001\002\000\006\005\ufff0\021\ufff0" +
    "\001\002\000\006\005\021\021\020\001\002\000\006\005" +
    "\uffec\021\uffec\001\002\000\004\002\001\001\002\000\006" +
    "\005\uffed\021\uffed\001\002\000\006\051\017\052\016\001" +
    "\002\000\020\002\uffff\003\uffff\014\uffff\015\uffff\016\uffff" +
    "\017\uffff\020\uffff\001\002\000\006\005\uffee\021\uffee\001" +
    "\002\000\020\002\ufffe\003\ufffe\014\ufffe\015\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\001\002\000\020\002\ufffd\003\ufffd\014" +
    "\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\001\002\000\004" +
    "\007\301\001\002\000\004\024\022\001\002\000\016\014" +
    "\006\015\005\016\012\017\010\020\015\025\uffd4\001\002" +
    "\000\006\005\300\021\020\001\002\000\006\025\uffd6\065" +
    "\276\001\002\000\004\025\027\001\002\000\004\025\uffd3" +
    "\001\002\000\004\050\030\001\002\000\036\005\042\014" +
    "\006\015\005\016\012\017\010\020\015\053\045\055\052" +
    "\056\034\057\050\062\037\063\046\066\041\067\060\001" +
    "\002\000\042\003\uffad\005\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\051\uffad\053\uffad\055\uffad\056\uffad\057" +
    "\uffad\062\uffad\063\uffad\066\uffad\067\uffad\001\002\000\042" +
    "\003\uffb1\005\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020" +
    "\uffb1\051\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\062\uffb1" +
    "\063\uffb1\066\uffb1\067\uffb1\001\002\000\042\003\uffb2\005" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\051\uffb2" +
    "\053\uffb2\055\uffb2\056\uffb2\057\uffb2\062\uffb2\063\uffb2\066" +
    "\uffb2\067\uffb2\001\002\000\004\024\263\001\002\000\042" +
    "\003\uffb0\005\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020" +
    "\uffb0\051\uffb0\053\uffb0\055\uffb0\056\uffb0\057\uffb0\062\uffb0" +
    "\063\uffb0\066\uffb0\067\uffb0\001\002\000\042\003\ufff6\005" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\051\ufff6" +
    "\053\ufff6\055\ufff6\056\ufff6\057\ufff6\062\ufff6\063\ufff6\066" +
    "\ufff6\067\ufff6\001\002\000\004\052\262\001\002\000\042" +
    "\003\ufff5\005\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\051\ufff5\053\ufff5\055\ufff5\056\ufff5\057\ufff5\062\ufff5" +
    "\063\ufff5\066\ufff5\067\ufff5\001\002\000\004\024\256\001" +
    "\002\000\006\023\253\024\127\001\002\000\042\003\117" +
    "\005\042\014\006\015\005\016\012\017\010\020\015\051" +
    "\252\053\045\055\052\056\034\057\050\062\037\063\046" +
    "\066\041\067\060\001\002\000\006\005\232\021\020\001" +
    "\002\000\004\024\220\001\002\000\024\005\101\007\110" +
    "\010\073\011\104\012\076\013\102\024\077\036\106\047" +
    "\071\001\002\000\042\003\ufffb\005\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\051\ufffb\053\ufffb\055\ufffb\056" +
    "\ufffb\057\ufffb\062\ufffb\063\ufffb\066\ufffb\067\ufffb\001\002" +
    "\000\004\024\175\001\002\000\042\003\uffaf\005\uffaf\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf\051\uffaf\053\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\062\uffaf\063\uffaf\066\uffaf\067" +
    "\uffaf\001\002\000\004\024\065\001\002\000\042\003\ufff4" +
    "\005\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\051" +
    "\ufff4\053\ufff4\055\ufff4\056\ufff4\057\ufff4\062\ufff4\063\ufff4" +
    "\066\ufff4\067\ufff4\001\002\000\042\003\uffae\005\uffae\014" +
    "\uffae\015\uffae\016\uffae\017\uffae\020\uffae\051\uffae\053\uffae" +
    "\055\uffae\056\uffae\057\uffae\062\uffae\063\uffae\066\uffae\067" +
    "\uffae\001\002\000\042\003\ufff3\005\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\051\ufff3\053\ufff3\055\ufff3\056" +
    "\ufff3\057\ufff3\062\ufff3\063\ufff3\066\ufff3\067\ufff3\001\002" +
    "\000\042\003\ufff8\005\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\051\ufff8\053\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\062\ufff8\063\ufff8\066\ufff8\067\ufff8\001\002\000\042\003" +
    "\ufff7\005\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7" +
    "\051\ufff7\053\ufff7\055\ufff7\056\ufff7\057\ufff7\062\ufff7\063" +
    "\ufff7\066\ufff7\067\ufff7\001\002\000\004\024\061\001\002" +
    "\000\004\005\062\001\002\000\004\025\063\001\002\000" +
    "\004\052\064\001\002\000\042\003\ufff1\005\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\020\ufff1\051\ufff1\053\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\062\ufff1\063\ufff1\066\ufff1\067\ufff1" +
    "\001\002\000\024\005\101\007\110\010\073\011\104\012" +
    "\076\013\102\024\077\036\106\047\071\001\002\000\016" +
    "\022\uffc6\025\uffc6\045\uffc6\046\uffc6\052\uffc6\065\uffc6\001" +
    "\002\000\016\022\uffc8\025\uffc8\045\uffc8\046\uffc8\052\uffc8" +
    "\065\uffc8\001\002\000\016\022\uffc4\025\uffc4\045\uffc4\046" +
    "\uffc4\052\uffc4\065\uffc4\001\002\000\024\005\101\007\110" +
    "\010\073\011\104\012\076\013\102\024\077\036\106\047" +
    "\071\001\002\000\006\007\173\010\172\001\002\000\050" +
    "\022\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\046\uffe2\052\uffe2\064\uffe2\065\uffe2\001" +
    "\002\000\046\022\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\052\uffcb\065\uffcb" +
    "\001\002\000\046\022\uffc9\025\uffc9\026\155\027\161\030" +
    "\150\031\156\032\153\033\157\037\146\040\145\041\152" +
    "\042\160\043\154\044\147\045\uffc9\046\uffc9\052\uffc9\065" +
    "\uffc9\001\002\000\050\022\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\037\uffe0\040\uffe0\041" +
    "\uffe0\042\uffe0\043\uffe0\044\uffe0\045\uffe0\046\uffe0\052\uffe0" +
    "\064\uffe0\065\uffe0\001\002\000\024\005\101\007\110\010" +
    "\073\011\104\012\076\013\102\024\077\036\106\047\071" +
    "\001\002\000\016\022\uffc7\025\uffc7\045\uffc7\046\uffc7\052" +
    "\uffc7\065\uffc7\001\002\000\056\021\125\022\uffce\024\127" +
    "\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\124\035\126\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\052\uffce\065\uffce\001" +
    "\002\000\050\022\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\052\uffdf\064\uffdf" +
    "\065\uffdf\001\002\000\016\022\uffc5\025\uffc5\045\uffc5\046" +
    "\uffc5\052\uffc5\065\uffc5\001\002\000\050\022\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\046\uffe1\052\uffe1\064\uffe1\065\uffe1\001\002\000\010\025" +
    "\113\045\112\046\111\001\002\000\006\007\uffe4\010\uffe4" +
    "\001\002\000\046\022\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\052\uffcc\065" +
    "\uffcc\001\002\000\050\022\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3\052\uffe3" +
    "\064\uffe3\065\uffe3\001\002\000\024\005\101\007\110\010" +
    "\073\011\104\012\076\013\102\024\077\036\106\047\071" +
    "\001\002\000\024\005\101\007\110\010\073\011\104\012" +
    "\076\013\102\024\077\036\106\047\071\001\002\000\004" +
    "\050\114\001\002\000\036\005\042\014\006\015\005\016" +
    "\012\017\010\020\015\053\045\055\052\056\034\057\050" +
    "\062\037\063\046\066\041\067\060\001\002\000\042\003" +
    "\117\005\042\014\006\015\005\016\012\017\010\020\015" +
    "\051\116\053\045\055\052\056\034\057\050\062\037\063" +
    "\046\066\041\067\060\001\002\000\042\003\uffaa\005\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\051\uffaa\053" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\062\uffaa\063\uffaa\066\uffaa" +
    "\067\uffaa\001\002\000\004\052\121\001\002\000\042\003" +
    "\ufffa\005\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\051\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa\062\ufffa\063" +
    "\ufffa\066\ufffa\067\ufffa\001\002\000\042\003\ufff9\005\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\051\ufff9\053" +
    "\ufff9\055\ufff9\056\ufff9\057\ufff9\062\ufff9\063\ufff9\066\ufff9" +
    "\067\ufff9\001\002\000\016\022\uffbc\025\uffbc\045\uffbc\046" +
    "\uffbc\052\uffbc\065\uffbc\001\002\000\016\022\uffbb\025\uffbb" +
    "\045\112\046\uffbb\052\uffbb\065\uffbb\001\002\000\016\022" +
    "\uffd0\025\uffd0\045\uffd0\046\uffd0\052\uffd0\065\uffd0\001\002" +
    "\000\024\005\101\007\110\010\073\011\104\012\076\013" +
    "\102\024\077\036\106\047\071\001\002\000\016\022\uffcf" +
    "\025\uffcf\045\uffcf\046\uffcf\052\uffcf\065\uffcf\001\002\000" +
    "\020\005\133\007\110\010\073\011\104\012\076\013\102" +
    "\025\uffda\001\002\000\004\025\137\001\002\000\006\025" +
    "\uffdd\065\uffdd\001\002\000\004\025\uffd9\001\002\000\006" +
    "\025\uffde\065\uffde\001\002\000\006\025\uffdc\065\135\001" +
    "\002\000\016\005\133\007\110\010\073\011\104\012\076" +
    "\013\102\001\002\000\004\025\uffdb\001\002\000\004\052" +
    "\140\001\002\000\106\003\uffd8\005\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\uffd8\022\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\055\uffd8\056\uffd8\057\uffd8\062\uffd8" +
    "\063\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002\000\010\022" +
    "\142\045\112\046\111\001\002\000\046\022\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\052\uffcd\065\uffcd\001\002\000\010\025\144\045" +
    "\112\046\111\001\002\000\016\022\uffc3\025\uffc3\045\uffc3" +
    "\046\uffc3\052\uffc3\065\uffc3\001\002\000\016\005\162\007" +
    "\110\010\073\011\104\012\076\013\102\001\002\000\016" +
    "\005\162\007\110\010\073\011\104\012\076\013\102\001" +
    "\002\000\016\005\162\007\110\010\073\011\104\012\076" +
    "\013\102\001\002\000\024\005\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\013\uffe7\024\uffe7\036\uffe7\047\uffe7\001\002" +
    "\000\024\005\101\007\110\010\073\011\104\012\076\013" +
    "\102\024\077\036\106\047\071\001\002\000\016\005\162" +
    "\007\110\010\073\011\104\012\076\013\102\001\002\000" +
    "\024\005\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\024\uffe6\036\uffe6\047\uffe6\001\002\000\016\005\162\007" +
    "\110\010\073\011\104\012\076\013\102\001\002\000\024" +
    "\005\uffea\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\024" +
    "\uffea\036\uffea\047\uffea\001\002\000\024\005\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\013\uffe8\024\uffe8\036\uffe8\047" +
    "\uffe8\001\002\000\024\005\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\024\uffe5\036\uffe5\047\uffe5\001\002\000" +
    "\016\005\162\007\110\010\073\011\104\012\076\013\102" +
    "\001\002\000\024\005\uffe9\007\uffe9\010\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\024\uffe9\036\uffe9\047\uffe9\001\002\000\022" +
    "\021\125\022\uffce\024\127\025\uffce\045\uffce\046\uffce\052" +
    "\uffce\065\uffce\001\002\000\016\022\uffbf\025\uffbf\045\uffbf" +
    "\046\uffbf\052\uffbf\065\uffbf\001\002\000\016\022\uffbe\025" +
    "\uffbe\045\uffbe\046\uffbe\052\uffbe\065\uffbe\001\002\000\016" +
    "\022\uffc0\025\uffc0\045\uffc0\046\uffc0\052\uffc0\065\uffc0\001" +
    "\002\000\016\022\uffca\025\uffca\045\112\046\111\052\uffca" +
    "\065\uffca\001\002\000\016\022\uffbd\025\uffbd\045\uffbd\046" +
    "\uffbd\052\uffbd\065\uffbd\001\002\000\016\022\uffc2\025\uffc2" +
    "\045\uffc2\046\uffc2\052\uffc2\065\uffc2\001\002\000\016\022" +
    "\uffc1\025\uffc1\045\uffc1\046\uffc1\052\uffc1\065\uffc1\001\002" +
    "\000\016\022\uffd1\025\uffd1\045\uffd1\046\uffd1\052\uffd1\065" +
    "\uffd1\001\002\000\016\022\uffd2\025\uffd2\045\uffd2\046\uffd2" +
    "\052\uffd2\065\uffd2\001\002\000\016\022\uffba\025\uffba\045" +
    "\uffba\046\uffba\052\uffba\065\uffba\001\002\000\024\005\101" +
    "\007\110\010\073\011\104\012\076\013\102\024\077\036" +
    "\106\047\071\001\002\000\010\025\177\045\112\046\111" +
    "\001\002\000\004\050\200\001\002\000\004\060\201\001" +
    "\002\000\014\007\110\010\073\011\104\012\076\013\102" +
    "\001\002\000\004\061\205\001\002\000\006\060\201\061" +
    "\uffa7\001\002\000\004\061\uffa6\001\002\000\004\064\206" +
    "\001\002\000\036\005\042\014\006\015\005\016\012\017" +
    "\010\020\015\053\045\055\052\056\034\057\050\062\037" +
    "\063\046\066\041\067\060\001\002\000\042\003\117\005" +
    "\042\014\006\015\005\016\012\017\010\020\015\051\210" +
    "\053\045\055\052\056\034\057\050\062\037\063\046\066" +
    "\041\067\060\001\002\000\042\003\uffa8\005\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\020\uffa8\051\uffa8\053\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\062\uffa8\063\uffa8\066\uffa8\067\uffa8" +
    "\001\002\000\004\064\212\001\002\000\036\005\042\014" +
    "\006\015\005\016\012\017\010\020\015\053\045\055\052" +
    "\056\034\057\050\062\037\063\046\066\041\067\060\001" +
    "\002\000\040\003\117\005\042\014\006\015\005\016\012" +
    "\017\010\020\015\053\045\055\052\056\034\057\050\062" +
    "\214\063\046\066\041\067\060\001\002\000\004\052\215" +
    "\001\002\000\044\003\uffa3\005\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\053\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\060\uffa5\061\uffa5\062\uffa3\063\uffa3\066\uffa3\067\uffa3\001" +
    "\002\000\010\045\112\046\111\052\217\001\002\000\042" +
    "\003\uffa4\005\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020" +
    "\uffa4\051\uffa4\053\uffa4\055\uffa4\056\uffa4\057\uffa4\062\uffa4" +
    "\063\uffa4\066\uffa4\067\uffa4\001\002\000\024\005\101\007" +
    "\110\010\073\011\104\012\076\013\102\024\077\036\106" +
    "\047\071\001\002\000\010\025\222\045\112\046\111\001" +
    "\002\000\004\050\223\001\002\000\036\005\042\014\006" +
    "\015\005\016\012\017\010\020\015\053\045\055\052\056" +
    "\034\057\050\062\037\063\046\066\041\067\060\001\002" +
    "\000\042\003\117\005\042\014\006\015\005\016\012\017" +
    "\010\020\015\051\225\053\045\055\052\056\034\057\050" +
    "\062\037\063\046\066\041\067\060\001\002\000\044\003" +
    "\uffac\005\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac" +
    "\051\uffac\053\uffac\054\226\055\uffac\056\uffac\057\uffac\062" +
    "\uffac\063\uffac\066\uffac\067\uffac\001\002\000\004\050\227" +
    "\001\002\000\036\005\042\014\006\015\005\016\012\017" +
    "\010\020\015\053\045\055\052\056\034\057\050\062\037" +
    "\063\046\066\041\067\060\001\002\000\042\003\117\005" +
    "\042\014\006\015\005\016\012\017\010\020\015\051\231" +
    "\053\045\055\052\056\034\057\050\062\037\063\046\066" +
    "\041\067\060\001\002\000\042\003\uffab\005\uffab\014\uffab" +
    "\015\uffab\016\uffab\017\uffab\020\uffab\051\uffab\053\uffab\055" +
    "\uffab\056\uffab\057\uffab\062\uffab\063\uffab\066\uffab\067\uffab" +
    "\001\002\000\010\021\234\023\235\052\233\001\002\000" +
    "\044\003\uffb9\005\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\051\uffb9\052\uffb9\053\uffb9\055\uffb9\056\uffb9\057" +
    "\uffb9\062\uffb9\063\uffb9\066\uffb9\067\uffb9\001\002\000\004" +
    "\007\247\001\002\000\026\005\101\007\110\010\073\011" +
    "\104\012\076\013\102\021\236\024\077\036\106\047\071" +
    "\001\002\000\024\005\101\007\110\010\073\011\104\012" +
    "\076\013\102\024\077\036\106\047\071\001\002\000\010" +
    "\045\112\046\111\052\240\001\002\000\044\003\uffb8\005" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\051\uffb8" +
    "\052\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\062\uffb8\063" +
    "\uffb8\066\uffb8\067\uffb8\001\002\000\004\022\245\001\002" +
    "\000\012\022\uffb5\045\112\046\111\065\243\001\002\000" +
    "\024\005\101\007\110\010\073\011\104\012\076\013\102" +
    "\024\077\036\106\047\071\001\002\000\004\022\uffb4\001" +
    "\002\000\004\052\246\001\002\000\044\003\uffb6\005\uffb6" +
    "\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\055\uffb6\056\uffb6\057\uffb6\062\uffb6\063\uffb6" +
    "\066\uffb6\067\uffb6\001\002\000\004\022\250\001\002\000" +
    "\004\052\251\001\002\000\044\003\uffb7\005\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\055\uffb7\056\uffb7\057\uffb7\062\uffb7\063\uffb7\066\uffb7" +
    "\067\uffb7\001\002\000\020\002\ufffc\003\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\020\ufffc\001\002\000\024\005\101" +
    "\007\110\010\073\011\104\012\076\013\102\024\077\036" +
    "\106\047\071\001\002\000\010\045\112\046\111\052\255" +
    "\001\002\000\044\003\uffb3\005\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\025\uffb3\051\uffb3\053\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\062\uffb3\063\uffb3\066\uffb3\067\uffb3\001" +
    "\002\000\024\005\101\007\110\010\073\011\104\012\076" +
    "\013\102\024\077\036\106\047\071\001\002\000\010\025" +
    "\260\045\112\046\111\001\002\000\004\052\261\001\002" +
    "\000\042\003\ufff2\005\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\051\ufff2\053\ufff2\055\ufff2\056\ufff2\057\ufff2" +
    "\062\ufff2\063\ufff2\066\ufff2\067\ufff2\001\002\000\042\003" +
    "\uffa3\005\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\051\uffa3\053\uffa3\055\uffa3\056\uffa3\057\uffa3\062\uffa3\063" +
    "\uffa3\066\uffa3\067\uffa3\001\002\000\014\014\006\015\005" +
    "\016\012\017\010\020\015\001\002\000\004\052\265\001" +
    "\002\000\024\005\101\007\110\010\073\011\104\012\076" +
    "\013\102\024\077\036\106\047\071\001\002\000\010\045" +
    "\112\046\111\052\267\001\002\000\004\005\271\001\002" +
    "\000\004\025\272\001\002\000\004\023\253\001\002\000" +
    "\004\050\273\001\002\000\036\005\042\014\006\015\005" +
    "\016\012\017\010\020\015\053\045\055\052\056\034\057" +
    "\050\062\037\063\046\066\041\067\060\001\002\000\042" +
    "\003\117\005\042\014\006\015\005\016\012\017\010\020" +
    "\015\051\275\053\045\055\052\056\034\057\050\062\037" +
    "\063\046\066\041\067\060\001\002\000\042\003\uffa9\005" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\051\uffa9" +
    "\053\uffa9\055\uffa9\056\uffa9\057\uffa9\062\uffa9\063\uffa9\066" +
    "\uffa9\067\uffa9\001\002\000\014\014\006\015\005\016\012" +
    "\017\010\020\015\001\002\000\004\025\uffd5\001\002\000" +
    "\006\025\uffd7\065\uffd7\001\002\000\004\022\302\001\002" +
    "\000\006\005\uffeb\021\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\002\003\001\001\000\006\003\006\012" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\022\007\023\010\025\011\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\043" +
    "\004\055\005\056\013\035\020\042\025\046\030\037\031" +
    "\032\032\031\033\034\034\050\037\053\040\030\041\052" +
    "\042\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\043\004\055\005\056" +
    "\013\035\025\117\030\037\031\032\032\031\033\034\034" +
    "\050\037\053\040\030\041\052\042\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\071\013\073\017" +
    "\106\021\215\023\066\024\074\026\077\027\065\043\102" +
    "\044\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\071\013" +
    "\073\017\106\021\104\023\066\024\074\026\077\027\065" +
    "\043\102\044\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\071\013\073\017\106" +
    "\021\173\023\066\024\074\026\077\027\065\043\102\044" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\150\001\001\000\002\001\001\000" +
    "\026\006\071\013\073\017\106\021\142\023\066\024\074" +
    "\026\077\027\065\043\102\044\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\071\013\073" +
    "\017\106\021\122\023\066\024\074\026\077\027\065\043" +
    "\102\044\067\001\001\000\026\006\071\013\073\017\106" +
    "\021\121\023\066\024\074\026\077\027\065\043\102\044" +
    "\067\001\001\000\002\001\001\000\040\003\043\004\055" +
    "\005\056\013\035\020\114\025\046\030\037\031\032\032" +
    "\031\033\034\034\050\037\053\040\030\041\052\042\054" +
    "\001\001\000\036\003\043\004\055\005\056\013\035\025" +
    "\117\030\037\031\032\032\031\033\034\034\050\037\053" +
    "\040\030\041\052\042\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\071\013\073\017\106\021\140\023\066\024\074\026\077" +
    "\027\065\043\102\044\067\001\001\000\002\001\001\000" +
    "\012\014\133\015\131\016\127\017\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\133\015\135\017\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\073\017\106\024\170\001" +
    "\001\000\010\013\073\017\106\024\167\001\001\000\010" +
    "\013\073\017\106\024\166\001\001\000\002\001\001\000" +
    "\026\006\071\013\073\017\106\021\165\023\066\024\074" +
    "\026\077\027\065\043\102\044\067\001\001\000\010\013" +
    "\073\017\106\024\164\001\001\000\002\001\001\000\010" +
    "\013\073\017\106\024\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\073\017\106" +
    "\024\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\071\013\073\017\106\021\175\023\066\024" +
    "\074\026\077\027\065\043\102\044\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\201\036\202\001" +
    "\001\000\004\017\210\001\001\000\002\001\001\000\006" +
    "\035\203\036\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\003\043\004\055\005\056\013\035\020\206" +
    "\025\046\030\037\031\032\032\031\033\034\034\050\037" +
    "\053\040\030\041\052\042\054\001\001\000\036\003\043" +
    "\004\055\005\056\013\035\025\117\030\037\031\032\032" +
    "\031\033\034\034\050\037\053\040\030\041\052\042\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\043\004\055\005\056\013\035\020\212\025\046\030\037" +
    "\031\032\032\031\033\034\034\050\037\053\040\030\041" +
    "\052\042\054\001\001\000\036\003\043\004\055\005\056" +
    "\013\035\025\117\030\037\031\032\032\031\033\034\034" +
    "\050\037\053\040\030\041\052\042\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\071\013\073\017\106\021\220\023\066" +
    "\024\074\026\077\027\065\043\102\044\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\003\043\004\055" +
    "\005\056\013\035\020\223\025\046\030\037\031\032\032" +
    "\031\033\034\034\050\037\053\040\030\041\052\042\054" +
    "\001\001\000\036\003\043\004\055\005\056\013\035\025" +
    "\117\030\037\031\032\032\031\033\034\034\050\037\053" +
    "\040\030\041\052\042\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\003\043\004\055\005\056\013\035" +
    "\020\227\025\046\030\037\031\032\032\031\033\034\034" +
    "\050\037\053\040\030\041\052\042\054\001\001\000\036" +
    "\003\043\004\055\005\056\013\035\025\117\030\037\031" +
    "\032\032\031\033\034\034\050\037\053\040\030\041\052" +
    "\042\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\071\013\073" +
    "\017\106\021\236\023\066\024\074\026\077\027\065\043" +
    "\102\044\067\001\001\000\030\006\071\013\073\017\106" +
    "\021\241\023\066\024\074\026\077\027\065\043\102\044" +
    "\067\045\240\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\071\013" +
    "\073\017\106\021\241\023\066\024\074\026\077\027\065" +
    "\043\102\044\067\045\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\071\013\073\017\106\021\253\023\066\024\074\026\077" +
    "\027\065\043\102\044\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\071\013\073\017\106\021\256" +
    "\023\066\024\074\026\077\027\065\043\102\044\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\043\004\263\001\001\000" +
    "\002\001\001\000\026\006\071\013\073\017\106\021\265" +
    "\023\066\024\074\026\077\027\065\043\102\044\067\001" +
    "\001\000\002\001\001\000\004\005\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\003" +
    "\043\004\055\005\056\013\035\020\273\025\046\030\037" +
    "\031\032\032\031\033\034\034\050\037\053\040\030\041" +
    "\052\042\054\001\001\000\036\003\043\004\055\005\056" +
    "\013\035\025\117\030\037\031\032\032\031\033\034\034" +
    "\050\037\053\040\030\041\052\042\054\001\001\000\002" +
    "\001\001\000\010\003\022\007\023\010\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    //Lista de errores controlados
    private List<String> errorList = new ArrayList<>();
    

    // Agrega errores controlados a la lista
    public void logError(Symbol s) {
        String error = "Error cerca de Linea: " + (s.right + 1) + " Columna: " + (s.left + 1) + ", Texto: \"" + s.value + "\"";
        errorList.add(error);
    }

    // Obtiene la lista de errores controlados
    public List<String> getErrorList() {
        return errorList;
    }

    // Gestiona errores recuperables -error-
    public void syntax_error(Symbol s){
        this.s = s;
        logError(s);
    }

    // Gestiona errores no recuperables
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String error = "\nError no recuperable:\n No se encontró final de sentencia (finregalo), \n o no se encontró final de bloque (cierracuento) \n o se determinó un error desconocido ";
        errorList.add(error);
    }

    // Método para obtener el Symbol donde se generó el error.
    public Symbol getS(){
        return this.s;
    }

    //Método para salida por consolda
    public void print(String prodName, Symbol s){
         String salida = "Encontrado " +prodName+ " : cerca de Linea: " + (s.right + 1) + " Columna: " + (s.left + 1) + ", Texto: \"" + s.value + "\"";
         System.out.println(salida); 
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // BREAK_STATEMENT ::= Break EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK_STATEMENT",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RETURN_STATEMENT ::= Return EXPRESSION EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_STATEMENT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CASE ::= Case LITERALS Colon FUNCTION_DECLARATION_BODY Break EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CASES ::= CASE CASES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASES ::= CASE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SWITCH_STRUCTURE ::= Switch ParenthesisOpening EXPRESSION ParenthesisClosure BlockOpening CASES Default Colon FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_STRUCTURE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR_STRUCTURE ::= For ParenthesisOpening VARIABLE_DECLARATION EndSentence EXPRESSION EndSentence VARIABLE_ASSIGNMENT ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_STRUCTURE",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // WHILE_STRUCTURE ::= While ParenthesisOpening EXPRESSION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_STRUCTURE",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IF_STRUCTURE ::= If ParenthesisOpening EXPRESSION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure Else BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STRUCTURE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IF_STRUCTURE ::= If ParenthesisOpening EXPRESSION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_STRUCTURE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONTROL_STRUCTURE ::= BREAK_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONTROL_STRUCTURE ::= RETURN_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONTROL_STRUCTURE ::= SWITCH_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONTROL_STRUCTURE ::= FOR_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTROL_STRUCTURE ::= WHILE_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTROL_STRUCTURE ::= IF_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTROL_STRUCTURE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARIABLE_ASSIGNMENT ::= Identifier AssignmentSign EXPRESSION EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_ASSIGNMENT",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESSION_LIST ::= EXPRESSION Comma EXPRESSION_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESSION_LIST ::= EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION_LIST",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VARIABLE_DECLARATION ::= VARIABLE_TYPE Identifier AssignmentSign BracketOpening EXPRESSION_LIST BracketClosure EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARIABLE_DECLARATION ::= VARIABLE_TYPE Identifier BracketOpening IntegerLiteral BracketClosure EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARIABLE_DECLARATION ::= VARIABLE_TYPE Identifier AssignmentSign EXPRESSION EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARIABLE_DECLARATION ::= VARIABLE_TYPE Identifier EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_DECLARATION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LOGICAL_EXPRESSION ::= Negation EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICAL_EXPRESSION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LOGICAL_EXPRESSION ::= EXPRESSION Disjunction EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICAL_EXPRESSION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOGICAL_EXPRESSION ::= EXPRESSION Conjunction EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICAL_EXPRESSION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RELATIONAL_EXPRESSION ::= SIMPLE_EXPRESSION NotEqual SIMPLE_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_EXPRESSION",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RELATIONAL_EXPRESSION ::= SIMPLE_EXPRESSION Equal SIMPLE_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_EXPRESSION",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RELATIONAL_EXPRESSION ::= SIMPLE_EXPRESSION GreaterEqual SIMPLE_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_EXPRESSION",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RELATIONAL_EXPRESSION ::= SIMPLE_EXPRESSION Greater SIMPLE_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_EXPRESSION",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RELATIONAL_EXPRESSION ::= SIMPLE_EXPRESSION LessEqual SIMPLE_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_EXPRESSION",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RELATIONAL_EXPRESSION ::= SIMPLE_EXPRESSION Less SIMPLE_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_EXPRESSION",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESSION ::= ParenthesisOpening EXPRESSION ParenthesisClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESSION ::= LOGICAL_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESSION ::= RELATIONAL_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESSION ::= UNARY_ARITHMETIC_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESSION ::= NEGATIVE_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESSION ::= ARITHMETIC_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESSION ::= SIMPLE_EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARITHMETIC_EXPRESSION ::= SIMPLE_EXPRESSION BINARY_ARITHMETIC_OPERATOR EXPRESSION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETIC_EXPRESSION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIMPLE_EXPRESSION ::= FUNCTION_CALL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_EXPRESSION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SIMPLE_EXPRESSION ::= LITERALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_EXPRESSION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIMPLE_EXPRESSION ::= Identifier BracketOpening EXPRESSION BracketClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_EXPRESSION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIMPLE_EXPRESSION ::= Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_EXPRESSION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // UNARY_ARITHMETIC_EXPRESSION ::= Identifier Decrement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_ARITHMETIC_EXPRESSION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // UNARY_ARITHMETIC_EXPRESSION ::= Identifier Increment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UNARY_ARITHMETIC_EXPRESSION",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NEGATIVE_LITERAL ::= NEGATIVE_OPERATOR FloatLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEGATIVE_LITERAL",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NEGATIVE_LITERAL ::= NEGATIVE_OPERATOR IntegerLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEGATIVE_LITERAL",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PARAMETER_DECLARATION_OPTION ::= PARAMETER_DECLARATION_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION_OPTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETER_DECLARATION_OPTION ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION_OPTION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETER_DECLARATION_LIST ::= PARAMETER_DECLARATION Comma PARAMETER_DECLARATION_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION_LIST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETER_DECLARATION_LIST ::= PARAMETER_DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION_LIST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETER_DECLARATION ::= VARIABLE_TYPE Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_DECLARATION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCTION_CALL ::= Identifier ParenthesisOpening FUNCTION_CALL_PARAMETER_OPTION ParenthesisClosure EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCTION_CALL_PARAMETER_OPTION ::= FUNCTION_CALL_PARAMETER_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER_OPTION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCTION_CALL_PARAMETER_OPTION ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER_OPTION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FUNCTION_CALL_PARAMETER_LIST ::= FUNCTION_CALL_PARAMETER Comma FUNCTION_CALL_PARAMETER_LIST 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER_LIST",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FUNCTION_CALL_PARAMETER_LIST ::= FUNCTION_CALL_PARAMETER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER_LIST",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FUNCTION_CALL_PARAMETER ::= LITERALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FUNCTION_CALL_PARAMETER ::= Identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL_PARAMETER",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LITERALS ::= StringLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LITERALS ::= CharacterLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LITERALS ::= BoolLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LITERALS ::= FloatLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LITERALS ::= IntegerLiteral 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LITERALS",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NEGATIVE_OPERATOR ::= Negative 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NEGATIVE_OPERATOR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BINARY_ARITHMETIC_OPERATOR ::= Power 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BINARY_ARITHMETIC_OPERATOR ::= Module 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BINARY_ARITHMETIC_OPERATOR ::= Division 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BINARY_ARITHMETIC_OPERATOR ::= Multiplication 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BINARY_ARITHMETIC_OPERATOR ::= Subtraction 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BINARY_ARITHMETIC_OPERATOR ::= Sum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINARY_ARITHMETIC_OPERATOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VARIABLE_TYPE ::= VARIABLE_TYPE BracketOpening IntegerLiteral BracketClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VARIABLE_TYPE ::= Char 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VARIABLE_TYPE ::= Bool 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VARIABLE_TYPE ::= String 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VARIABLE_TYPE ::= Float 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLE_TYPE ::= Integer 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_TYPE",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // READ_STATEMENT ::= Read ParenthesisOpening Identifier ParenthesisClosure EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ_STATEMENT",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PRINT_STATEMENT ::= Print ParenthesisOpening EXPRESSION ParenthesisClosure EndSentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT_STATEMENT",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCTION_BODY_ELEMENT ::= READ_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY_ELEMENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCTION_BODY_ELEMENT ::= PRINT_STATEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY_ELEMENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCTION_BODY_ELEMENT ::= CONTROL_STRUCTURE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY_ELEMENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCTION_BODY_ELEMENT ::= FUNCTION_CALL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY_ELEMENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FUNCTION_BODY_ELEMENT ::= VARIABLE_ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY_ELEMENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FUNCTION_BODY_ELEMENT ::= VARIABLE_DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_BODY_ELEMENT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCTION_DECLARATION_BODY ::= FUNCTION_DECLARATION_BODY error EndSentence 
            {
              Object RESULT =null;
		Symbol s = (Symbol)CUP$Parser$stack.peek(); parser.print("EndSentence",s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_BODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCTION_DECLARATION_BODY ::= FUNCTION_DECLARATION_BODY FUNCTION_BODY_ELEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_BODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCTION_DECLARATION_BODY ::= FUNCTION_BODY_ELEMENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION_BODY",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCTION_DECLARATION ::= VARIABLE_TYPE Identifier ParenthesisOpening PARAMETER_DECLARATION_OPTION ParenthesisClosure BlockOpening FUNCTION_DECLARATION_BODY BlockClosure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_DECLARATION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAM ::= PROGRAM error BlockClosure 
            {
              Object RESULT =null;
		Symbol s = (Symbol)CUP$Parser$stack.peek(); parser.print("BlockClosure",s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAM ::= PROGRAM error EndSentence 
            {
              Object RESULT =null;
		Symbol s = (Symbol)CUP$Parser$stack.peek(); parser.print("EndSentence",s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= PROGRAM FUNCTION_DECLARATION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAM ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

